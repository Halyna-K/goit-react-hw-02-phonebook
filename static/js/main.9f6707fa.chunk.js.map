{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Alert/Alert.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","AlertDismissible","ContactForm","nameId","uuid","numberId","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","contact","props","addNewContact","resetForm","this","className","s","form","onSubmit","label","htmlFor","id","onChange","input","type","placeholder","pattern","title","required","Button","variant","Component","ContactList","contacts","onDeleteContact","map","item","text","onClick","Filter","App","initialContacts","filter","obj","prevState","changeFilter","deleteContact","contactId","normalizedFilter","toLowerCase","filteredContacts","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f6707fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__3YsZK\",\"text\":\"ContactList_text__2dM24\",\"btn\":\"ContactList_btn__1Xk4q\"};","import { useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { Button } from \"react-bootstrap\";\n\nfunction AlertDismissible(name) {\n  const [show, setShow] = useState(true);\n\n  return (\n    <>\n      <Alert show={show} variant=\"success\">\n        <Alert.Heading>localhost:3000 says</Alert.Heading>\n        <p> {name} is already in contacts.</p>\n        <div className=\"d-flex justify-content-end\">\n          <Button onClick={() => setShow(false)} variant=\"outline-success\">\n            OK\n          </Button>\n        </div>\n      </Alert>\n\n      {!show && <Button onClick={() => setShow(true)}>Show Alert</Button>}\n    </>\n  );\n}\nexport default AlertDismissible;\n","import s from \"./ContactForm.module.css\";\nimport { Component } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AlertDismissible from \"../Alert/Alert\";\n\nexport class ContactForm extends Component {\n  nameId = uuid();\n  numberId = uuid();\n\n  state = {\n    name: \"\",\n    number: \"\",\n    // contacts: [],\n  };\n\n  handleChange = (e) => {\n    // console.log(e.target.name, e.target.value);\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const contact = { name, number };\n    this.setState({ contact });\n    <AlertDismissible name={name} />;\n    this.props.addNewContact(contact);\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({ ...this.state });\n  };\n\n  render() {\n    // console.log(this.state.name, this.state.number);\n    const { name, number } = this.state;\n    const { nameId, numberId, handleSubmit, handleChange } = this;\n    return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label} htmlFor={nameId}>\n          Name\n        </label>\n        <input\n          id={nameId}\n          onChange={handleChange}\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <label className={s.label} htmlFor={numberId}>\n          Number\n        </label>\n        <input\n          id={numberId}\n          onChange={handleChange}\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n        <Button\n          type=\"submit\"\n          variant=\"secondary\"\n          //   className={s.btn}\n        >\n          Add contacts\n        </Button>\n      </form>\n      //   <Form>\n      //     <Form.Group className=\"mb-3\" htmlFor={nameId} onSubmit={handleSubmit}>\n      //       <Form.Label htmlFor={nameId}>Name</Form.Label>\n      //       {/* <Form.Control type=\"text\" placeholder=\"Enter name\" /> */}\n      //       <Form.Input\n      //         className=\"text-muted\"\n      //         id={nameId}\n      //         onChange={handleChange}\n      //         //   className={s.input}\n      //         type=\"text\"\n      //         name=\"name\"\n      //         value={name}\n      //         placeholder=\"Enter name\"\n      //         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      //         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      //         required\n      //       ></Form.Input>\n      //     </Form.Group>\n\n      //     <Form.Group className=\"mb-3\" htmlFor={numberId}>\n      //       <Form.Label htmlFor={numberId}>Number</Form.Label>\n      //       {/* <Form.Control type=\"tel\" placeholder=\"Enter number\" /> */}\n      //       <Form.Input\n      //         className=\"text-muted\"\n      //         id={numberId}\n      //         onChange={handleChange}\n      //         // className={s.input}\n      //         type=\"tel\"\n      //         name=\"number\"\n      //         value={number}\n      //         placeholder=\"Enter number\"\n      //         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      //         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      //         required\n      //       ></Form.Input>\n      //     </Form.Group>\n\n      //     <Button\n      //       type=\"submit\"\n      //       variant=\"secondary\"\n      //       //   className={s.btn}\n      //     >\n      //       Add contacts\n      //     </Button>\n      //   </Form>\n    );\n  }\n}\n","import s from \"./ContactList.module.css\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport const ContactList = ({ contacts, onDeleteContact }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        <p className={s.text}>\n          {name}: {number}\n        </p>\n        <Button\n          variant=\"outline-secondary\"\n          // className={s.btn}\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </Button>\n      </li>\n    ))}\n  </ul>\n);\n","import { v4 as uuid } from \"uuid\";\n\nconst nameId = uuid();\n\nexport const Filter = ({ value, onChange }) => (\n  <label htmlFor={nameId}>\n    Find contact by name\n    <input\n      id={nameId}\n      onChange={onChange}\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      placeholder=\"Enter contact name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n    />\n  </label>\n);\n","import \"./App.css\";\nimport { Component } from \"react\";\n// import PropTypes from \"prop-types\";\nimport initialContacts from \"./components/dataBase/contacts.json\";\nimport { ContactForm } from \"./components/ContactForm/ContactForm\";\nimport { ContactList } from \"./components/ContactList/ContactList\";\nimport { Filter } from \"./components/Filter/Filter\";\n// import AlertDismissible from \"./components/Alert/Alert\";\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: \"\",\n  };\n  addNewContact = (obj) => {\n    // <AlertDismissible />;\n    <ContactList contacts={this.state.contacts} />;\n    this.setState((prevState) => {\n      return {\n        contacts: [...prevState.contacts, obj],\n      };\n    });\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  render() {\n    // console.log(this.state);\n    // const { filter } = this.state;\n    const { addNewContact, changeFilter, deleteContact } = this;\n    const normalizedFilter = this.state.filter.toLowerCase();\n    const filteredContacts = this.state.contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm addNewContact={addNewContact} />\n        <h2>Contacts</h2>\n        <Filter value={this.state.filter} onChange={changeFilter} />\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={deleteContact}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"input\":\"ContactForm_input__gm87B\"};"],"sourceRoot":""}